{"version":3,"sources":["Simulation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Simulation","props","frame","rectangle","audio","buffers","simulationProgram","shadeProgram","fftTexture","videoTexture","uniforms","mousePos","x","y","z","gl","canvas","width","document","documentElement","clientWidth","height","clientHeight","this","twgl","position","i","format","RED","internalFormat","R16F","type","FLOAT","mag","LINEAR","min","wrap","REPEAT","vertexCode","header","simulation","msg","lineOffset","Error","shade","video_tex","fft_tex","SetupMouse","onLoad","video","glContext","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","array","R32F","length","getNoPaddingNoBorderCanvasRelativeMousePosition","element","pos","target","rect","getBoundingClientRect","left","top","getRelativeMousePosition","onmousemove","evt","buttons","clientX","clientY","onmousedown","ontouchmove","touch","touches","item","ontouchstart","onmouseup","ontouchend","ontouchcancel","time","PreDraw","u","iResolution","iFrame","iMouse","iTime","iChannel0","attachments","bindFramebuffer","FRAMEBUFFER","framebuffer","viewport","useProgram","program","requestAnimationFrame","render","Draw","Start","window","addEventListener","ref","getContext","React","Component","audioContext","audioAnalyser","fftArray","ensureAudioContext","AudioContext","latencyHint","createAnalyser","smoothingTimeConstant","fftSize","Float32Array","frequencyBinCount","audioSources","Map","currentVideoSource","removeAudioSource","deviceId","a","source","get","mediaStream","getTracks","stop","disconnect","delete","addAudioSource","navigator","mediaDevices","getUserMedia","echoCancellation","noiseSuppression","autoGainControl","channelCount","latency","stream","createMediaStreamSource","connect","destination","set","console","log","streamConnections","WeakMap","connectVideoToAudio","getElementById","audioSource","createMediaElementSource","streamSession","setVideoSource","srcObject","getDisplayMedia","desktopStream","getAudioTracks","desktopSource","MediaStream","getVideoTracks","src","startsWith","App","simRef","useRef","useState","devices","setDevices","className","sim","current","getFloatTimeDomainData","UpdateFFT","readyState","UpdateTexture","style","margin","value","onChange","e","currentTarget","disabled","map","info","kind","label","exampleVideos","title","onClick","enumerateDevices","checked","has","id","controls","crossOrigin","autoPlay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ddbe51f0.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\"\nimport * as twgl from \"twgl.js\"\n\nclass GLRenderer extends React.Component {\n\tglContext: WebGL2RenderingContext = null as unknown as WebGL2RenderingContext\n\n\tpublic Start(gl: WebGL2RenderingContext) {}\n\tpublic Draw(gl: WebGL2RenderingContext, time: number) {}\n\n\tcomponentDidMount() {\n\t\ttwgl.addExtensionsToContext(this.glContext)\n\n\t\tconst render = (time: number) => {\n\t\t\tif (!this.glContext) return\n\t\t\tthis.Draw(this.glContext, time)\n\t\t\trequestAnimationFrame(render)\n\t\t}\n\n\t\trequestAnimationFrame(render)\n\n\t\tthis.Start(this.glContext)\n\n\t\twindow.addEventListener(\"resize\", () => {\n\t\t\tif (this.glContext) {\n\t\t\t\tthis.Start(this.glContext)\n\t\t\t}\n\t\t})\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.glContext = null as unknown as WebGL2RenderingContext\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<canvas\n\t\t\t\tref={(canvas) => {\n\t\t\t\t\tif (canvas) {\n\t\t\t\t\t\tconst glContext = canvas.getContext(\"webgl2\")\n\t\t\t\t\t\tif (!glContext) {\n\t\t\t\t\t\t\tthrow new Error(\"unable to get webgl2 rendering context from canvas\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.glContext = glContext\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t/>\n\t\t)\n\t}\n}\n\nexport class Simulation extends GLRenderer {\n\tprops: { simulation: string; shade: string; onLoad: (sim: Simulation) => void }\n\n\tframe = 0\n\trectangle: twgl.BufferInfo = null as unknown as twgl.BufferInfo\n\taudio: HTMLAudioElement = null as unknown as HTMLAudioElement\n\tbuffers: twgl.FramebufferInfo[] = null as unknown as twgl.FramebufferInfo[]\n\tsimulationProgram: twgl.ProgramInfo = null as unknown as twgl.ProgramInfo\n\tshadeProgram: twgl.ProgramInfo = null as unknown as twgl.ProgramInfo\n\tfftTexture: WebGLTexture = null as unknown as WebGLTexture\n\tvideoTexture: WebGLTexture = null as unknown as WebGLTexture\n\tuniforms: { [key: string]: any } = {}\n\tmousePos = { x: 0, y: 0, z: 0 }\n\n\tconstructor(props: { simulation: string; shade: string; onLoad: (sim: Simulation) => void }) {\n\t\tsuper(props)\n\t\tthis.props = props\n\t}\n\tStart(gl: WebGL2RenderingContext) {\n\t\tgl.canvas.width = document.documentElement.clientWidth\n\t\tgl.canvas.height = document.documentElement.clientHeight\n\n\t\tthis.rectangle = twgl.createBufferInfoFromArrays(gl, {\n\t\t\tposition: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0],\n\t\t})\n\n\t\t// front and back buffers\n\t\tthis.buffers = []\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tthis.buffers[i] = twgl.createFramebufferInfo(\n\t\t\t\tgl,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: gl.RED,\n\t\t\t\t\t\tinternalFormat: gl.R16F,\n\t\t\t\t\t\ttype: gl.FLOAT,\n\t\t\t\t\t\tmag: gl.LINEAR,\n\t\t\t\t\t\tmin: gl.LINEAR,\n\t\t\t\t\t\twrap: gl.REPEAT,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tgl.canvas.width,\n\t\t\t\tgl.canvas.height,\n\t\t\t)\n\t\t}\n\n\t\tconst vertexCode = `\n      attribute vec4 position;\n      void main() {\n        gl_Position = position;\n      }\n    `\n\n\t\tconst header = `\n      precision highp float;\n      #define texture texture2D\n      \n      uniform float iTime;\n      uniform vec2 iResolution;\n      uniform sampler2D video_tex;\n      uniform sampler2D fft_tex;\n      uniform vec3 iMouse;\n    `\n\n\t\tthis.simulationProgram = twgl.createProgramInfo(\n\t\t\tgl,\n\t\t\t[\n\t\t\t\tvertexCode,\n\t\t\t\t`${header}\n            uniform sampler2D iChannel0;\n            uniform int iFrame;\n            ${this.props.simulation}\n          `,\n\t\t\t],\n\t\t\t(msg, lineOffset) => {\n\t\t\t\tif (msg) {\n\t\t\t\t\tthrow new Error(msg)\n\t\t\t\t}\n\t\t\t},\n\t\t)\n\n\t\tthis.shadeProgram = twgl.createProgramInfo(\n\t\t\tgl,\n\t\t\t[\n\t\t\t\tvertexCode,\n\t\t\t\t`${header}\n            uniform sampler2D iChannel0;\n            ${this.props.shade}\n            `,\n\t\t\t],\n\t\t\t(msg, lineOffset) => {\n\t\t\t\tif (msg) {\n\t\t\t\t\tthrow new Error(msg)\n\t\t\t\t}\n\t\t\t},\n\t\t)\n\n\t\tif (!this.videoTexture) {\n\t\t\tthis.videoTexture = twgl.createTexture(gl, {\n\t\t\t\tmin: gl.LINEAR,\n\t\t\t\tmag: gl.LINEAR,\n\t\t\t\twrap: gl.REPEAT,\n\t\t\t})\n\t\t\tthis.uniforms.video_tex = this.videoTexture\n\t\t}\n\n\t\tif (!this.fftTexture) {\n\t\t\tthis.fftTexture = twgl.createTexture(gl, {\n\t\t\t\tmin: gl.LINEAR,\n\t\t\t\twrap: gl.REPEAT,\n\t\t\t})\n\t\t\tthis.uniforms.fft_tex = this.fftTexture\n\t\t}\n\n\t\tthis.SetupMouse(gl)\n\t\tthis.props.onLoad(this)\n\t}\n\n\tUpdateTexture(video: HTMLVideoElement) {\n\t\tconst gl = this.glContext\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.videoTexture)\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, video)\n\t}\n\n\tUpdateFFT(array: Float32Array) {\n\t\tconst gl = this.glContext\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.fftTexture)\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.R32F, array.length, 1, 0, gl.RED, gl.FLOAT, array)\n\t}\n\n\tSetupMouse(gl: WebGL2RenderingContext) {\n\t\tthis.mousePos = { x: 0, y: 0, z: 0 }\n\n\t\tconst getRelativeMousePosition = (x: number, y: number, target: HTMLCanvasElement) => {\n\t\t\tvar rect = target.getBoundingClientRect()\n\n\t\t\treturn {\n\t\t\t\tx: x - rect.left,\n\t\t\t\ty: x - rect.top,\n\t\t\t}\n\t\t}\n\n\t\t// assumes target or event.target is canvas\n\t\tconst getNoPaddingNoBorderCanvasRelativeMousePosition = (x: number, y: number, element: HTMLCanvasElement) => {\n\t\t\tvar pos = getRelativeMousePosition(x, y, element)\n\n\t\t\tpos.x = (pos.x * element.width) / element.clientWidth\n\t\t\tpos.y = (pos.y * element.height) / element.clientHeight\n\n\t\t\treturn pos\n\t\t}\n\n\t\tconst canvas = gl.canvas as HTMLCanvasElement\n\n\t\tcanvas.onmousemove = (evt) => {\n\t\t\tthis.mousePos = { z: evt.buttons, ...getNoPaddingNoBorderCanvasRelativeMousePosition(evt.clientX, evt.clientY, gl.canvas as HTMLCanvasElement) }\n\t\t}\n\t\tcanvas.onmousedown = (evt) => {\n\t\t\tthis.mousePos = { z: evt.buttons, ...getNoPaddingNoBorderCanvasRelativeMousePosition(evt.clientX, evt.clientY, gl.canvas as HTMLCanvasElement) }\n\t\t}\n\t\tcanvas.ontouchmove = (evt) => {\n\t\t\tlet touch = evt.touches.item(0)\n\t\t\tif (!touch) return\n\n\t\t\tthis.mousePos = { z: 1, ...getNoPaddingNoBorderCanvasRelativeMousePosition(touch.clientX, touch.clientY, gl.canvas as HTMLCanvasElement) }\n\t\t}\n\t\tcanvas.ontouchstart = (evt) => {\n\t\t\tlet touch = evt.touches.item(0)\n\t\t\tif (!touch) return\n\n\t\t\tthis.mousePos = { z: 1, ...getNoPaddingNoBorderCanvasRelativeMousePosition(touch.clientX, touch.clientY, gl.canvas as HTMLCanvasElement) }\n\t\t}\n\n\t\tcanvas.onmouseup = () => {\n\t\t\tthis.mousePos.z = 0\n\t\t}\n\n\t\tcanvas.ontouchend = () => {\n\t\t\tthis.mousePos.z = 0\n\t\t}\n\n\t\tcanvas.ontouchcancel = () => {\n\t\t\tthis.mousePos.z = 0\n\t\t}\n\t}\n\n\tPreDraw() {}\n\n\tDraw(gl: WebGL2RenderingContext, time: number) {\n\t\tconst canvas = gl.canvas as HTMLCanvasElement\n\n\t\tif (twgl.resizeCanvasToDisplaySize(canvas)) {\n\t\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t\ttwgl.resizeFramebufferInfo(gl, this.buffers[i])\n\t\t\t}\n\t\t}\n\n\t\tthis.PreDraw()\n\n\t\tlet u = this.uniforms\n\n\t\tu.iResolution = [gl.canvas.width, gl.canvas.height]\n\n\t\tu.iFrame = this.frame\n\t\tu.iMouse = [this.mousePos.x, -this.mousePos.y + gl.canvas.height, this.mousePos.z]\n\t\tu.iTime = time * 0.0015\n\n\t\tu.iChannel0 = this.buffers[1].attachments[0]\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.buffers[0].framebuffer)\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t\tgl.useProgram(this.simulationProgram.program)\n\t\ttwgl.setBuffersAndAttributes(gl, this.simulationProgram, this.rectangle)\n\t\ttwgl.setUniforms(this.simulationProgram, this.uniforms)\n\t\ttwgl.drawBufferInfo(gl, this.rectangle)\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\t;[this.buffers[0], this.buffers[1]] = [this.buffers[1], this.buffers[0]]\n\n\t\tthis.frame = this.frame + 1\n\n\t\tu.iChannel0 = this.buffers[1].attachments[0]\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\n\t\tgl.useProgram(this.shadeProgram.program)\n\t\ttwgl.setBuffersAndAttributes(gl, this.shadeProgram, this.rectangle)\n\t\ttwgl.setUniforms(this.shadeProgram, this.uniforms)\n\t\ttwgl.drawBufferInfo(gl, this.rectangle)\n\t}\n}\n","import { useEffect, useRef, useState } from \"react\"\nimport { Simulation } from \"./Simulation\"\nimport exampleVideos from \"./assets/videos.json\"\n\nlet audioContext = null as unknown as AudioContext\nlet audioAnalyser = null as unknown as AnalyserNode\nlet fftArray = null as unknown as Float32Array\n\nconst ensureAudioContext = () => {\n\tif (audioContext) return\n\n\taudioContext = new AudioContext({\n\t\tlatencyHint: \"interactive\",\n\t})\n\n\taudioAnalyser = audioContext.createAnalyser()\n\taudioAnalyser.smoothingTimeConstant = 0.0\n\taudioAnalyser.fftSize = 2048\n\n\tfftArray = new Float32Array(audioAnalyser.frequencyBinCount)\n}\n\nconst audioSources = new Map<string, MediaStreamAudioSourceNode>()\nlet currentVideoSource = \"none\"\n\nconst removeAudioSource = async (deviceId: string) => {\n\tconst source = audioSources.get(deviceId)\n\tif (!source) return\n\n\tfor (const track of source.mediaStream.getTracks()) {\n\t\ttrack.stop()\n\t}\n\tsource.disconnect()\n\n\taudioSources.delete(deviceId)\n}\n\nconst addAudioSource = async (deviceId: string) => {\n\tconst stream = await navigator.mediaDevices.getUserMedia({\n\t\tvideo: false,\n\t\taudio: {\n\t\t\tdeviceId: deviceId,\n\t\t\techoCancellation: false,\n\t\t\tnoiseSuppression: false,\n\t\t\tautoGainControl: false,\n\t\t\tchannelCount: 2,\n\t\t\tlatency: 0.02,\n\t\t},\n\t})\n\n\tconst source = audioContext.createMediaStreamSource(stream)\n\n\tsource.connect(audioAnalyser)\n\tsource.connect(audioContext.destination)\n\n\taudioSources.set(deviceId, source)\n\n\tconsole.log(\"started listening to \" + deviceId)\n}\n\nlet streamConnections = new WeakMap<HTMLVideoElement, MediaElementAudioSourceNode>()\n\nconst connectVideoToAudio = () => {\n\tconst video = document.getElementById(\"videoPlayer\") as HTMLVideoElement\n\tif (!video) return\n\tensureAudioContext()\n\n\tconst prev = streamConnections.get(video)\n\tif (prev) {\n\t\treturn\n\t}\n\n\tconst audioSource = audioContext.createMediaElementSource(video)\n\tstreamConnections.set(video, audioSource)\n\n\taudioSource.connect(audioAnalyser)\n\taudioSource.connect(audioContext.destination)\n}\n\nlet streamSession: null | MediaStream = null\n\nconst setVideoSource = async (source: string) => {\n\tconst video = document.getElementById(\"videoPlayer\") as HTMLVideoElement\n\tif (!video) return\n\n\tensureAudioContext()\n\n\tif (streamSession) {\n\t\tfor (let track of streamSession.getTracks()) {\n\t\t\ttrack.stop()\n\t\t}\n\t\tvideo.srcObject = null\n\t}\n\n\tif (source === \"desktop\") {\n\t\tconst desktopStream = await (navigator.mediaDevices as MediaDevices & { getDisplayMedia: (opts: MediaStreamConstraints) => MediaStream }).getDisplayMedia({\n\t\t\tvideo: true,\n\t\t\taudio: {\n\t\t\t\techoCancellation: false,\n\t\t\t\tnoiseSuppression: false,\n\t\t\t\tautoGainControl: false,\n\t\t\t\tchannelCount: 2,\n\t\t\t\tlatency: 0.02,\n\t\t\t},\n\t\t})\n\n\t\tif (desktopStream.getAudioTracks().length > 0) {\n\t\t\tconst desktopSource = audioContext.createMediaStreamSource(desktopStream)\n\t\t\tdesktopSource.connect(audioAnalyser)\n\t\t\tdesktopSource.connect(audioContext.destination)\n\t\t}\n\n\t\tstreamSession = desktopStream\n\n\t\tconst stream = new MediaStream([...desktopStream.getVideoTracks()])\n\n\t\tvideo.srcObject = stream\n\t} else if (source === \"none\") {\n\t\tvideo.src = \"\"\n\t} else if (source.startsWith(\"http\")) {\n\t\tvideo.src = source\n\t} else {\n\t\tvideo.srcObject = await navigator.mediaDevices.getUserMedia({\n\t\t\tvideo: {\n\t\t\t\tdeviceId: source,\n\t\t\t},\n\t\t\taudio: false,\n\t\t})\n\t}\n\n\tcurrentVideoSource = source\n}\n\nfunction App() {\n\tconst simRef = useRef<Simulation | null>(null)\n\tconst [devices, setDevices] = useState<MediaDeviceInfo[]>([])\n\tconst [, render] = useState({})\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Simulation\n\t\t\t\tonLoad={(sim) => {\n\t\t\t\t\tsimRef.current = sim\n\n\t\t\t\t\tconst video = document.getElementById(\"videoPlayer\") as HTMLVideoElement\n\t\t\t\t\tif (!video) return\n\n\t\t\t\t\tsim.PreDraw = () => {\n\t\t\t\t\t\tif (audioAnalyser) {\n\t\t\t\t\t\t\taudioAnalyser.getFloatTimeDomainData(fftArray)\n\t\t\t\t\t\t\tsim.UpdateFFT(fftArray)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (video.readyState >= 2) {\n\t\t\t\t\t\t\tsim.UpdateTexture(video)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tsimulation={`\n                    #define FFT(f) texture(fft_tex, vec2(f, 0.0)).x\n                    #define PIXEL(x, y) texture(iChannel0, uv + vec2(x, y) / iResolution.xy).r\n\n                    void mainImage(out vec4 out_color, in vec2 coordinates)\n                    {    \n                        vec2 uv = coordinates.xy / iResolution.xy;                  \n                        \n                        float v = PIXEL(0.0, 0.0);\n                        v = PIXEL(\n                            sin(PIXEL(v, 0.0)  - PIXEL(-v, 0.0) + 3.1415) * v * 0.4, \n                            cos(PIXEL(0.0, -v) - PIXEL(0.0 , v) - 1.57) * v * 0.4\n                        );\n                        v += pow(FFT(pow(v*0.1, 1.5) * 0.25) * 1.5, 3.0);\n                        v -= pow(length(texture(video_tex, uv * vec2(1.0, -1.0))) + 0.05, 3.0) * 0.08;\n                        v *= 0.925 + FFT(v)*0.1;\n\n                        if (iMouse.z > 0.0) {\n                            v += smoothstep(100.0, 0.5, length(iMouse.xy - coordinates)) * 0.05;\n                        }\n                        \n                        out_color.r = v;\n                    }\n\n                    void main() { mainImage(gl_FragColor, gl_FragCoord.xy); }\n                    `}\n\t\t\t\tshade={`\n                    void mainImage( out vec4 out_color, in vec2 coordinates )\n                    {\n                        vec2 uv = coordinates.xy/iResolution.xy;\n                        float v = texture(iChannel0, uv).r * 1.5;\n                            \n                        vec3 color = pow(vec3(cos(v), tan(v), sin(v)) * 0.5 + 0.5, vec3(0.5));\n                        vec3 e = vec3(vec2(1.0) / iResolution.xy, 0.0);\n                        vec3 grad = normalize(vec3(\n                            texture(iChannel0, uv + e.xz).x - texture(iChannel0, uv - e.xz).x, \n                            texture(iChannel0, uv + e.zy).x - texture(iChannel0, uv - e.zy).x, 1.0));\n                        vec3 light = vec3(0.26, -0.32, 0.91);\n                        float diffuse = dot(grad, light);\n                        float spec = pow(max(0.0, -reflect(light, grad).z), 32.0);\n                        \n                        out_color.rgb = (color * diffuse) + spec;\n                        out_color.a = 1.0;\n                    }\n\n                    void main() { mainImage(gl_FragColor, gl_FragCoord.xy); }\n                    `}\n\t\t\t></Simulation>\n\n\t\t\t<div style={{ margin: 30 }}>\n\t\t\t\t<h2>audio and video input</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={currentVideoSource}\n\t\t\t\t\t\tonChange={async (e) => {\n\t\t\t\t\t\t\tawait setVideoSource(e.currentTarget.value)\n\t\t\t\t\t\t\tawait connectVideoToAudio()\n\t\t\t\t\t\t\trender({})\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option key={\"none\"} value={\"none\"}>\n\t\t\t\t\t\t\t{\"None\"}\n\t\t\t\t\t\t</option>\n\n\t\t\t\t\t\t<option disabled>── input devices ──</option>\n\t\t\t\t\t\t<option key={\"desktop\"} value={\"desktop\"}>\n\t\t\t\t\t\t\t{\"Desktop\"}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t{devices.map((info) => {\n\t\t\t\t\t\t\tif (info.kind === \"videoinput\") {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<option key={info.deviceId} value={info.deviceId}>\n\t\t\t\t\t\t\t\t\t\t{info.label || \"unknown device: \" + info.deviceId}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<option disabled>── sample videos ──</option>\n\n\t\t\t\t\t\t{exampleVideos.map((info) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<option key={info.source} value={info.source}>\n\t\t\t\t\t\t\t\t\t{info.title}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</select>\n\t\t\t\t</ul>\n\n\t\t\t\t<h2>extra audio input</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{devices.length === 0 ? (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait navigator.mediaDevices.getUserMedia({ audio: true })\n\t\t\t\t\t\t\t\t} catch (err) {}\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait navigator.mediaDevices.getUserMedia({ video: true })\n\t\t\t\t\t\t\t\t} catch (err) {}\n\t\t\t\t\t\t\t\tsetDevices(await navigator.mediaDevices.enumerateDevices())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\trequest access\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t{devices.map((info) => {\n\t\t\t\t\t\tif (info.kind === \"audioinput\") {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={info.deviceId}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttitle={info.label || \"unknown device: \" + info.deviceId}\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\tchecked={audioSources.has(info.deviceId)}\n\t\t\t\t\t\t\t\t\t\tonChange={async (e) => {\n\t\t\t\t\t\t\t\t\t\t\tensureAudioContext()\n\t\t\t\t\t\t\t\t\t\t\tif (audioSources.has(info.deviceId)) {\n\t\t\t\t\t\t\t\t\t\t\t\tawait removeAudioSource(info.deviceId)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tawait addAudioSource(info.deviceId)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\trender({})\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<span>{info.label}</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\n\t\t\t\t<h2>video player</h2>\n\t\t\t\t<video key=\"videoplayer\" id=\"videoPlayer\" style={{ width: 512 }} controls crossOrigin=\"anonymous\" src=\"\" autoPlay />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}